plugins {
	id 'java-library'
	id 'eclipse'
	id 'jvm-test-suite'
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'net.syntactickitsune'
version = '1.0.0'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
java.withSourcesJar()

sourceSets {
	io {}
	cli {
		compileClasspath += sourceSets.io.output
		runtimeClasspath += sourceSets.io.output
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
	main {
		compileClasspath += sourceSets.io.output
		runtimeClasspath += sourceSets.io.output
	}
	test {
		compileClasspath += sourceSets.io.output
		runtimeClasspath += sourceSets.io.output
	}
}

configurations {
	ioImplementation.extendsFrom implementation
	ioCompileOnly.extendsFrom compileOnly
	cliImplementation.extendsFrom implementation
	cliCompileOnly.extendsFrom compileOnly
	testCompileOnly.extendsFrom compileOnly
}

testing {
	suites {
		test {
			useJUnitJupiter()
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	api 'org.jetbrains:annotations:24.1.0'
	api 'com.google.code.gson:gson:2.10.1'

	testImplementation 'org.reflections:reflections:0.10.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

tasks.withType(AbstractArchiveTask).configureEach {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}

jar {
	archiveClassifier = 'finmer'
	from sourceSets.io.output
	manifest {
		attributes([
			'Automatic-Module-Name': 'net.syntactickitsune.furblorb.finmer'
		])
	}
}

tasks.register('ioJar', Jar) {
	archiveClassifier = 'io'
	from sourceSets.io.output
	manifest {
		attributes([
			'Automatic-Module-Name': 'net.syntactickitsune.furblorb.io'
		])
	}
}

tasks.register('ioSourcesJar', Jar) {
	archiveClassifier = 'io-sources'
	from sourceSets.io.allSource
}

sourcesJar {
	archiveClassifier = 'finmer-sources'
	exclude 'serializables.txt'
}

tasks.named('shadowJar', com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar).configure {
	archiveClassifier = 'cli'
	from sourceSets.io.output
	from sourceSets.cli.output
	exclude 'module-info.class'
	exclude 'META-INF/maven/**'
	exclude 'META-INF/versions/9/**'
	from 'LICENSE.md'
	from 'LICENSE.LESSER.md'

	manifest {
		attributes([
			'Main-Class': 'net.syntactickitsune.furblorb.cli.Furblorb',
			'Automatic-Module-Name': 'net.syntactickitsune.furblorb.cli'
		])
	}
}

tasks.register('cliSourcesJar', Jar) {
	archiveClassifier = 'sources'
	from sourceSets.io.allSource
	from sourceSets.main.allSource
	from sourceSets.cli.allSource
	exclude 'serializables.txt'
	exclude 'usage.txt'
	exclude 'version.txt'
	from 'LICENSE.md'
	from 'LICENSE.LESSER.md'
}

artifacts {
	archives ioJar, ioSourcesJar, shadowJar, cliSourcesJar
}

processCliResources {
	duplicatesStrategy = DuplicatesStrategy.INCLUDE

	inputs.property 'version', version

	from(sourceSets.cli.resources.srcDirs) {
		include 'version.txt'

		expand 'version':version
	}

	from(sourceSets.cli.resources.srcDirs) {
		exclude 'version.txt'
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact ioJar
			artifact ioSourcesJar
			artifact cliSourcesJar
			pom {
				name = 'Furblorb'
				description = 'A command-line tool for reading/writing furballs and Finmer projects.'
				url = 'https://github.com/SyntacticKitsune/Furblorb'
				licenses {
					license {
						name = 'LGPL-3-or-later'
						url = 'https://www.gnu.org/licenses/lgpl-3.0.en.html'
						distribution = 'repo'
					}
				}
				issueManagement {
					system = 'GitHub Issues'
					url = 'https://github.com/SyntacticKitsune/Furblorb/issues'
				}
				scm {
					url = 'https://github.com/SyntacticKitsune/Furblorb'
					connection = 'scm:git:https://github.com/SyntacticKitsune/Furblorb.git'
					developerConnection = 'scm:git:https://github.com/SyntacticKitsune/Furblorb.git'
				}
			}
		}
	}
}