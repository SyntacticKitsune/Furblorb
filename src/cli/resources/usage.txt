Furblorb: an unpacker/packer for Finmer "furballs"

Usage: java -jar Furblorb-%VERSION%.jar <arguments...>
Ex. 1: java -jar Furblorb-%VERSION%.jar --read Core.furball --write Core/Core.fnproj
Ex. 2: java -jar Furblorb-%VERSION%.jar --read Core/Core.fnproj --write Core.furball

Informational options:

  --help
          Print this text and exit.
  --version
          Print Furblorb's version and exit.
  --list-shufflers
          Print a list of shufflers which can be used by
          the shuffle operation (--shuffle) and exit.

Note: "furball" in the following sections may be either a
      furball (.furball file) or a Finmer project (.fnproj file).

I/O options:

  --read <file>
          Read from the specified file. The file must
          either be a furball (".furball") or a Finmer
          project (".fnproj").
  --write <file>
          Write to the specified file. Furblorb assumes
          it should write a furball if the filename ends
          in ".furball" and that it should write a Finmer
          project if the filename ends with ".fnproj".
  --format-version <version>
          Write in the specified format version.
          Warning: changing the format version can
          and probably will cause problems!
          As Minecraft would say, "Here be dragons!"

Analysis options:

  --show
          Display information about the read furball,
          including metadata, dependencies, and assets.
  --show-full
          Like show, but also includes a list of assets.

Manipulation options (these affect the read furball):

  --change-title <value>
          Set the title to the specified value.
  --change-author <value>
          Set the author to the specified value.
  --add-dependency <ID> <filename>
          Add a dependency on a furball or project with
          the specified ID and filename.
  --drop-dependency <ID>
          Remove any dependencies on the specified ID.

  --insert-asset <filename>
          Insert the specified Json asset.
  --extract-asset-id <ID> <destination>
          Extract the Json asset with the specified ID and
          write it to the specified file.
  --extract-asset-name <filename> <destination>
          Extract the Json asset with the specified filename
          and write it to the specified file.
  --drop-asset-id <ID>
          Remove ("drop") the asset with the specified ID.
  --drop-asset-name <filename>
          Remove ("drop") the asset with the specified filename.
  --sort-assets
          Sort all of the assets.
  --merge <file>
          Merge the specified furball into the read furball. Any
          dependencies that the specified file has will be
          inherited by the read file, except for dependencies on
          the read file itself. All other metadata on the specified
          file will be discarded. Assets will replace any assets in
          the read furball that they share an ID with.
  --shuffle <shuffler names> <seed>
          Use the specified shufflers to shuffle the assets in the
          read furball. The shuffler names argument must be a comma-
          separated list of shuffler ids, which can be found using
          --list-shufflers, or the string "all" to apply all
          available shufflers. The seed argument may be either a
          number or a string. Numbers will be used directly;
          strings will have their Java hash used.
